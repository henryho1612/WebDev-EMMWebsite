#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace COSC2450_A2_s3357671
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="COSC2450_A2_s3357671_DB")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    partial void InsertDrug(Drug instance);
    partial void UpdateDrug(Drug instance);
    partial void DeleteDrug(Drug instance);
    partial void InsertDrugGroup(DrugGroup instance);
    partial void UpdateDrugGroup(DrugGroup instance);
    partial void DeleteDrugGroup(DrugGroup instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertHospital(Hospital instance);
    partial void UpdateHospital(Hospital instance);
    partial void DeleteHospital(Hospital instance);
    partial void InsertIcd(Icd instance);
    partial void UpdateIcd(Icd instance);
    partial void DeleteIcd(Icd instance);
    partial void InsertIcdChapter(IcdChapter instance);
    partial void UpdateIcdChapter(IcdChapter instance);
    partial void DeleteIcdChapter(IcdChapter instance);
    partial void InsertLabOrder(LabOrder instance);
    partial void UpdateLabOrder(LabOrder instance);
    partial void DeleteLabOrder(LabOrder instance);
    partial void InsertLabOrderDetail(LabOrderDetail instance);
    partial void UpdateLabOrderDetail(LabOrderDetail instance);
    partial void DeleteLabOrderDetail(LabOrderDetail instance);
    partial void InsertMedicalService(MedicalService instance);
    partial void UpdateMedicalService(MedicalService instance);
    partial void DeleteMedicalService(MedicalService instance);
    partial void InsertMedicalServiceGroup(MedicalServiceGroup instance);
    partial void UpdateMedicalServiceGroup(MedicalServiceGroup instance);
    partial void DeleteMedicalServiceGroup(MedicalServiceGroup instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertPrescriptionDetail(PrescriptionDetail instance);
    partial void UpdatePrescriptionDetail(PrescriptionDetail instance);
    partial void DeletePrescriptionDetail(PrescriptionDetail instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["COSC2450_A2_s3357671_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<Drug> Drugs
		{
			get
			{
				return this.GetTable<Drug>();
			}
		}
		
		public System.Data.Linq.Table<DrugGroup> DrugGroups
		{
			get
			{
				return this.GetTable<DrugGroup>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<Hospital> Hospitals
		{
			get
			{
				return this.GetTable<Hospital>();
			}
		}
		
		public System.Data.Linq.Table<Icd> Icds
		{
			get
			{
				return this.GetTable<Icd>();
			}
		}
		
		public System.Data.Linq.Table<IcdChapter> IcdChapters
		{
			get
			{
				return this.GetTable<IcdChapter>();
			}
		}
		
		public System.Data.Linq.Table<LabOrder> LabOrders
		{
			get
			{
				return this.GetTable<LabOrder>();
			}
		}
		
		public System.Data.Linq.Table<LabOrderDetail> LabOrderDetails
		{
			get
			{
				return this.GetTable<LabOrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<MedicalService> MedicalServices
		{
			get
			{
				return this.GetTable<MedicalService>();
			}
		}
		
		public System.Data.Linq.Table<MedicalServiceGroup> MedicalServiceGroups
		{
			get
			{
				return this.GetTable<MedicalServiceGroup>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<PrescriptionDetail> PrescriptionDetails
		{
			get
			{
				return this.GetTable<PrescriptionDetail>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _doctorId;
		
		private string _doctorName;
		
		private long _genderId;
		
		private System.DateTime _dob;
		
		private string _address;
		
		private string _license;
		
		private EntitySet<Visit> _Visits;
		
		private EntitySet<LabOrder> _LabOrders;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<Gender> _Gender;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OndoctorNameChanging(string value);
    partial void OndoctorNameChanged();
    partial void OngenderIdChanging(long value);
    partial void OngenderIdChanged();
    partial void OndobChanging(System.DateTime value);
    partial void OndobChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnlicenseChanging(string value);
    partial void OnlicenseChanged();
    #endregion
		
		public Doctor()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._LabOrders = new EntitySet<LabOrder>(new Action<LabOrder>(this.attach_LabOrders), new Action<LabOrder>(this.detach_LabOrders));
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._Gender = default(EntityRef<Gender>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string doctorName
		{
			get
			{
				return this._doctorName;
			}
			set
			{
				if ((this._doctorName != value))
				{
					this.OndoctorNameChanging(value);
					this.SendPropertyChanging();
					this._doctorName = value;
					this.SendPropertyChanged("doctorName");
					this.OndoctorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderId", DbType="BigInt NOT NULL")]
		public long genderId
		{
			get
			{
				return this._genderId;
			}
			set
			{
				if ((this._genderId != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngenderIdChanging(value);
					this.SendPropertyChanging();
					this._genderId = value;
					this.SendPropertyChanged("genderId");
					this.OngenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date NOT NULL")]
		public System.DateTime dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_license", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string license
		{
			get
			{
				return this._license;
			}
			set
			{
				if ((this._license != value))
				{
					this.OnlicenseChanging(value);
					this.SendPropertyChanging();
					this._license = value;
					this.SendPropertyChanged("license");
					this.OnlicenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Visits", ThisKey="doctorId", OtherKey="doctorId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_LabOrder", Storage="_LabOrders", ThisKey="doctorId", OtherKey="doctorId")]
		public EntitySet<LabOrder> LabOrders
		{
			get
			{
				return this._LabOrders;
			}
			set
			{
				this._LabOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Prescription", Storage="_Prescriptions", ThisKey="doctorId", OtherKey="doctorId")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Doctor", Storage="_Gender", ThisKey="genderId", OtherKey="genderId", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._genderId = value.genderId;
					}
					else
					{
						this._genderId = default(long);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_LabOrders(LabOrder entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_LabOrders(LabOrder entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _visitId;
		
		private long _hospitalId;
		
		private long _doctorId;
		
		private long _patientId;
		
		private long _icdId;
		
		private System.Nullable<long> _prescriptionId;
		
		private System.Nullable<long> _labOrderId;
		
		private System.DateTime _dateVisit;
		
		private string _outcome;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<Icd> _Icd;
		
		private EntityRef<LabOrder> _LabOrder;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvisitIdChanging(long value);
    partial void OnvisitIdChanged();
    partial void OnhospitalIdChanging(long value);
    partial void OnhospitalIdChanged();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OnpatientIdChanging(long value);
    partial void OnpatientIdChanged();
    partial void OnicdIdChanging(long value);
    partial void OnicdIdChanged();
    partial void OnprescriptionIdChanging(System.Nullable<long> value);
    partial void OnprescriptionIdChanged();
    partial void OnlabOrderIdChanging(System.Nullable<long> value);
    partial void OnlabOrderIdChanged();
    partial void OndateVisitChanging(System.DateTime value);
    partial void OndateVisitChanged();
    partial void OnoutcomeChanging(string value);
    partial void OnoutcomeChanged();
    #endregion
		
		public Visit()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Hospital = default(EntityRef<Hospital>);
			this._Icd = default(EntityRef<Icd>);
			this._LabOrder = default(EntityRef<LabOrder>);
			this._Patient = default(EntityRef<Patient>);
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visitId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long visitId
		{
			get
			{
				return this._visitId;
			}
			set
			{
				if ((this._visitId != value))
				{
					this.OnvisitIdChanging(value);
					this.SendPropertyChanging();
					this._visitId = value;
					this.SendPropertyChanged("visitId");
					this.OnvisitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hospitalId", DbType="BigInt NOT NULL")]
		public long hospitalId
		{
			get
			{
				return this._hospitalId;
			}
			set
			{
				if ((this._hospitalId != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhospitalIdChanging(value);
					this.SendPropertyChanging();
					this._hospitalId = value;
					this.SendPropertyChanged("hospitalId");
					this.OnhospitalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", DbType="BigInt NOT NULL")]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientId", DbType="BigInt NOT NULL")]
		public long patientId
		{
			get
			{
				return this._patientId;
			}
			set
			{
				if ((this._patientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIdChanging(value);
					this.SendPropertyChanging();
					this._patientId = value;
					this.SendPropertyChanged("patientId");
					this.OnpatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icdId", DbType="BigInt NOT NULL")]
		public long icdId
		{
			get
			{
				return this._icdId;
			}
			set
			{
				if ((this._icdId != value))
				{
					if (this._Icd.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnicdIdChanging(value);
					this.SendPropertyChanging();
					this._icdId = value;
					this.SendPropertyChanged("icdId");
					this.OnicdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prescriptionId", DbType="BigInt")]
		public System.Nullable<long> prescriptionId
		{
			get
			{
				return this._prescriptionId;
			}
			set
			{
				if ((this._prescriptionId != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._prescriptionId = value;
					this.SendPropertyChanged("prescriptionId");
					this.OnprescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labOrderId", DbType="BigInt")]
		public System.Nullable<long> labOrderId
		{
			get
			{
				return this._labOrderId;
			}
			set
			{
				if ((this._labOrderId != value))
				{
					if (this._LabOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlabOrderIdChanging(value);
					this.SendPropertyChanging();
					this._labOrderId = value;
					this.SendPropertyChanged("labOrderId");
					this.OnlabOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateVisit", DbType="Date NOT NULL")]
		public System.DateTime dateVisit
		{
			get
			{
				return this._dateVisit;
			}
			set
			{
				if ((this._dateVisit != value))
				{
					this.OndateVisitChanging(value);
					this.SendPropertyChanging();
					this._dateVisit = value;
					this.SendPropertyChanged("dateVisit");
					this.OndateVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_outcome", DbType="VarChar(25)")]
		public string outcome
		{
			get
			{
				return this._outcome;
			}
			set
			{
				if ((this._outcome != value))
				{
					this.OnoutcomeChanging(value);
					this.SendPropertyChanging();
					this._outcome = value;
					this.SendPropertyChanged("outcome");
					this.OnoutcomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Doctor", ThisKey="doctorId", OtherKey="doctorId", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._doctorId = value.doctorId;
					}
					else
					{
						this._doctorId = default(long);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Visit", Storage="_Hospital", ThisKey="hospitalId", OtherKey="hospitalId", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._hospitalId = value.hospitalId;
					}
					else
					{
						this._hospitalId = default(long);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Icd_Visit", Storage="_Icd", ThisKey="icdId", OtherKey="icdId", IsForeignKey=true)]
		public Icd Icd
		{
			get
			{
				return this._Icd.Entity;
			}
			set
			{
				Icd previousValue = this._Icd.Entity;
				if (((previousValue != value) 
							|| (this._Icd.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Icd.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Icd.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._icdId = value.icdId;
					}
					else
					{
						this._icdId = default(long);
					}
					this.SendPropertyChanged("Icd");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_Visit", Storage="_LabOrder", ThisKey="labOrderId", OtherKey="labOrderId", IsForeignKey=true)]
		public LabOrder LabOrder
		{
			get
			{
				return this._LabOrder.Entity;
			}
			set
			{
				LabOrder previousValue = this._LabOrder.Entity;
				if (((previousValue != value) 
							|| (this._LabOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabOrder.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._LabOrder.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._labOrderId = value.labOrderId;
					}
					else
					{
						this._labOrderId = default(Nullable<long>);
					}
					this.SendPropertyChanged("LabOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Patient", ThisKey="patientId", OtherKey="patientId", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._patientId = value.patientId;
					}
					else
					{
						this._patientId = default(long);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Visit", Storage="_Prescription", ThisKey="prescriptionId", OtherKey="prescriptionId", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._prescriptionId = value.prescriptionId;
					}
					else
					{
						this._prescriptionId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drug")]
	public partial class Drug : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _drugId;
		
		private long _drugGroupId;
		
		private string _drugName;
		
		private string _drugGenericName;
		
		private string _unit;
		
		private decimal _price;
		
		private EntitySet<PrescriptionDetail> _PrescriptionDetails;
		
		private EntityRef<DrugGroup> _DrugGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndrugIdChanging(long value);
    partial void OndrugIdChanged();
    partial void OndrugGroupIdChanging(long value);
    partial void OndrugGroupIdChanged();
    partial void OndrugNameChanging(string value);
    partial void OndrugNameChanged();
    partial void OndrugGenericNameChanging(string value);
    partial void OndrugGenericNameChanged();
    partial void OnunitChanging(string value);
    partial void OnunitChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    #endregion
		
		public Drug()
		{
			this._PrescriptionDetails = new EntitySet<PrescriptionDetail>(new Action<PrescriptionDetail>(this.attach_PrescriptionDetails), new Action<PrescriptionDetail>(this.detach_PrescriptionDetails));
			this._DrugGroup = default(EntityRef<DrugGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drugId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long drugId
		{
			get
			{
				return this._drugId;
			}
			set
			{
				if ((this._drugId != value))
				{
					this.OndrugIdChanging(value);
					this.SendPropertyChanging();
					this._drugId = value;
					this.SendPropertyChanged("drugId");
					this.OndrugIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drugGroupId", DbType="BigInt NOT NULL")]
		public long drugGroupId
		{
			get
			{
				return this._drugGroupId;
			}
			set
			{
				if ((this._drugGroupId != value))
				{
					if (this._DrugGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndrugGroupIdChanging(value);
					this.SendPropertyChanging();
					this._drugGroupId = value;
					this.SendPropertyChanged("drugGroupId");
					this.OndrugGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drugName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string drugName
		{
			get
			{
				return this._drugName;
			}
			set
			{
				if ((this._drugName != value))
				{
					this.OndrugNameChanging(value);
					this.SendPropertyChanging();
					this._drugName = value;
					this.SendPropertyChanged("drugName");
					this.OndrugNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drugGenericName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string drugGenericName
		{
			get
			{
				return this._drugGenericName;
			}
			set
			{
				if ((this._drugGenericName != value))
				{
					this.OndrugGenericNameChanging(value);
					this.SendPropertyChanging();
					this._drugGenericName = value;
					this.SendPropertyChanged("drugGenericName");
					this.OndrugGenericNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				if ((this._unit != value))
				{
					this.OnunitChanging(value);
					this.SendPropertyChanging();
					this._unit = value;
					this.SendPropertyChanged("unit");
					this.OnunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(18,2) NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_PrescriptionDetail", Storage="_PrescriptionDetails", ThisKey="drugId", OtherKey="drugId")]
		public EntitySet<PrescriptionDetail> PrescriptionDetails
		{
			get
			{
				return this._PrescriptionDetails;
			}
			set
			{
				this._PrescriptionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugGroup_Drug", Storage="_DrugGroup", ThisKey="drugGroupId", OtherKey="drugGroupId", IsForeignKey=true)]
		public DrugGroup DrugGroup
		{
			get
			{
				return this._DrugGroup.Entity;
			}
			set
			{
				DrugGroup previousValue = this._DrugGroup.Entity;
				if (((previousValue != value) 
							|| (this._DrugGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugGroup.Entity = null;
						previousValue.Drugs.Remove(this);
					}
					this._DrugGroup.Entity = value;
					if ((value != null))
					{
						value.Drugs.Add(this);
						this._drugGroupId = value.drugGroupId;
					}
					else
					{
						this._drugGroupId = default(long);
					}
					this.SendPropertyChanged("DrugGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrescriptionDetails(PrescriptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Drug = this;
		}
		
		private void detach_PrescriptionDetails(PrescriptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Drug = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugGroup")]
	public partial class DrugGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _drugGroupId;
		
		private string _drugGroupName;
		
		private EntitySet<Drug> _Drugs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndrugGroupIdChanging(long value);
    partial void OndrugGroupIdChanged();
    partial void OndrugGroupNameChanging(string value);
    partial void OndrugGroupNameChanged();
    #endregion
		
		public DrugGroup()
		{
			this._Drugs = new EntitySet<Drug>(new Action<Drug>(this.attach_Drugs), new Action<Drug>(this.detach_Drugs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drugGroupId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long drugGroupId
		{
			get
			{
				return this._drugGroupId;
			}
			set
			{
				if ((this._drugGroupId != value))
				{
					this.OndrugGroupIdChanging(value);
					this.SendPropertyChanging();
					this._drugGroupId = value;
					this.SendPropertyChanged("drugGroupId");
					this.OndrugGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drugGroupName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string drugGroupName
		{
			get
			{
				return this._drugGroupName;
			}
			set
			{
				if ((this._drugGroupName != value))
				{
					this.OndrugGroupNameChanging(value);
					this.SendPropertyChanging();
					this._drugGroupName = value;
					this.SendPropertyChanged("drugGroupName");
					this.OndrugGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugGroup_Drug", Storage="_Drugs", ThisKey="drugGroupId", OtherKey="drugGroupId")]
		public EntitySet<Drug> Drugs
		{
			get
			{
				return this._Drugs;
			}
			set
			{
				this._Drugs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drugs(Drug entity)
		{
			this.SendPropertyChanging();
			entity.DrugGroup = this;
		}
		
		private void detach_Drugs(Drug entity)
		{
			this.SendPropertyChanging();
			entity.DrugGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _genderId;
		
		private string _genderName;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<Patient> _Patients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngenderIdChanging(long value);
    partial void OngenderIdChanged();
    partial void OngenderNameChanging(string value);
    partial void OngenderNameChanged();
    #endregion
		
		public Gender()
		{
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long genderId
		{
			get
			{
				return this._genderId;
			}
			set
			{
				if ((this._genderId != value))
				{
					this.OngenderIdChanging(value);
					this.SendPropertyChanging();
					this._genderId = value;
					this.SendPropertyChanged("genderId");
					this.OngenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string genderName
		{
			get
			{
				return this._genderName;
			}
			set
			{
				if ((this._genderName != value))
				{
					this.OngenderNameChanging(value);
					this.SendPropertyChanging();
					this._genderName = value;
					this.SendPropertyChanged("genderName");
					this.OngenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Doctor", Storage="_Doctors", ThisKey="genderId", OtherKey="genderId")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Patient", Storage="_Patients", ThisKey="genderId", OtherKey="genderId")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital")]
	public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _hospitalId;
		
		private string _hospitalName;
		
		private string _address;
		
		private string _license;
		
		private EntitySet<Visit> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnhospitalIdChanging(long value);
    partial void OnhospitalIdChanged();
    partial void OnhospitalNameChanging(string value);
    partial void OnhospitalNameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnlicenseChanging(string value);
    partial void OnlicenseChanged();
    #endregion
		
		public Hospital()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hospitalId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long hospitalId
		{
			get
			{
				return this._hospitalId;
			}
			set
			{
				if ((this._hospitalId != value))
				{
					this.OnhospitalIdChanging(value);
					this.SendPropertyChanging();
					this._hospitalId = value;
					this.SendPropertyChanged("hospitalId");
					this.OnhospitalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hospitalName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string hospitalName
		{
			get
			{
				return this._hospitalName;
			}
			set
			{
				if ((this._hospitalName != value))
				{
					this.OnhospitalNameChanging(value);
					this.SendPropertyChanging();
					this._hospitalName = value;
					this.SendPropertyChanged("hospitalName");
					this.OnhospitalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_license", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string license
		{
			get
			{
				return this._license;
			}
			set
			{
				if ((this._license != value))
				{
					this.OnlicenseChanging(value);
					this.SendPropertyChanging();
					this._license = value;
					this.SendPropertyChanged("license");
					this.OnlicenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Visit", Storage="_Visits", ThisKey="hospitalId", OtherKey="hospitalId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Icd")]
	public partial class Icd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _icdId;
		
		private long _icdChapterId;
		
		private string _icdCode;
		
		private string _icdName;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<IcdChapter> _IcdChapter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnicdIdChanging(long value);
    partial void OnicdIdChanged();
    partial void OnicdChapterIdChanging(long value);
    partial void OnicdChapterIdChanged();
    partial void OnicdCodeChanging(string value);
    partial void OnicdCodeChanged();
    partial void OnicdNameChanging(string value);
    partial void OnicdNameChanged();
    #endregion
		
		public Icd()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._IcdChapter = default(EntityRef<IcdChapter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icdId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long icdId
		{
			get
			{
				return this._icdId;
			}
			set
			{
				if ((this._icdId != value))
				{
					this.OnicdIdChanging(value);
					this.SendPropertyChanging();
					this._icdId = value;
					this.SendPropertyChanged("icdId");
					this.OnicdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icdChapterId", DbType="BigInt NOT NULL")]
		public long icdChapterId
		{
			get
			{
				return this._icdChapterId;
			}
			set
			{
				if ((this._icdChapterId != value))
				{
					if (this._IcdChapter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnicdChapterIdChanging(value);
					this.SendPropertyChanging();
					this._icdChapterId = value;
					this.SendPropertyChanged("icdChapterId");
					this.OnicdChapterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icdCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string icdCode
		{
			get
			{
				return this._icdCode;
			}
			set
			{
				if ((this._icdCode != value))
				{
					this.OnicdCodeChanging(value);
					this.SendPropertyChanging();
					this._icdCode = value;
					this.SendPropertyChanged("icdCode");
					this.OnicdCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icdName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string icdName
		{
			get
			{
				return this._icdName;
			}
			set
			{
				if ((this._icdName != value))
				{
					this.OnicdNameChanging(value);
					this.SendPropertyChanging();
					this._icdName = value;
					this.SendPropertyChanged("icdName");
					this.OnicdNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Icd_Visit", Storage="_Visits", ThisKey="icdId", OtherKey="icdId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IcdChapter_Icd", Storage="_IcdChapter", ThisKey="icdChapterId", OtherKey="icdChapterId", IsForeignKey=true)]
		public IcdChapter IcdChapter
		{
			get
			{
				return this._IcdChapter.Entity;
			}
			set
			{
				IcdChapter previousValue = this._IcdChapter.Entity;
				if (((previousValue != value) 
							|| (this._IcdChapter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IcdChapter.Entity = null;
						previousValue.Icds.Remove(this);
					}
					this._IcdChapter.Entity = value;
					if ((value != null))
					{
						value.Icds.Add(this);
						this._icdChapterId = value.icdChapterId;
					}
					else
					{
						this._icdChapterId = default(long);
					}
					this.SendPropertyChanged("IcdChapter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Icd = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Icd = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IcdChapter")]
	public partial class IcdChapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _icdChapterId;
		
		private string _icdChapterName;
		
		private EntitySet<Icd> _Icds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnicdChapterIdChanging(long value);
    partial void OnicdChapterIdChanged();
    partial void OnicdChapterNameChanging(string value);
    partial void OnicdChapterNameChanged();
    #endregion
		
		public IcdChapter()
		{
			this._Icds = new EntitySet<Icd>(new Action<Icd>(this.attach_Icds), new Action<Icd>(this.detach_Icds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icdChapterId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long icdChapterId
		{
			get
			{
				return this._icdChapterId;
			}
			set
			{
				if ((this._icdChapterId != value))
				{
					this.OnicdChapterIdChanging(value);
					this.SendPropertyChanging();
					this._icdChapterId = value;
					this.SendPropertyChanged("icdChapterId");
					this.OnicdChapterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icdChapterName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string icdChapterName
		{
			get
			{
				return this._icdChapterName;
			}
			set
			{
				if ((this._icdChapterName != value))
				{
					this.OnicdChapterNameChanging(value);
					this.SendPropertyChanging();
					this._icdChapterName = value;
					this.SendPropertyChanged("icdChapterName");
					this.OnicdChapterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IcdChapter_Icd", Storage="_Icds", ThisKey="icdChapterId", OtherKey="icdChapterId")]
		public EntitySet<Icd> Icds
		{
			get
			{
				return this._Icds;
			}
			set
			{
				this._Icds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Icds(Icd entity)
		{
			this.SendPropertyChanging();
			entity.IcdChapter = this;
		}
		
		private void detach_Icds(Icd entity)
		{
			this.SendPropertyChanging();
			entity.IcdChapter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabOrder")]
	public partial class LabOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _labOrderId;
		
		private long _doctorId;
		
		private System.DateTime _dateVisit;
		
		private EntitySet<Visit> _Visits;
		
		private EntitySet<LabOrderDetail> _LabOrderDetails;
		
		private EntityRef<Doctor> _Doctor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlabOrderIdChanging(long value);
    partial void OnlabOrderIdChanged();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OndateVisitChanging(System.DateTime value);
    partial void OndateVisitChanged();
    #endregion
		
		public LabOrder()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._LabOrderDetails = new EntitySet<LabOrderDetail>(new Action<LabOrderDetail>(this.attach_LabOrderDetails), new Action<LabOrderDetail>(this.detach_LabOrderDetails));
			this._Doctor = default(EntityRef<Doctor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labOrderId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long labOrderId
		{
			get
			{
				return this._labOrderId;
			}
			set
			{
				if ((this._labOrderId != value))
				{
					this.OnlabOrderIdChanging(value);
					this.SendPropertyChanging();
					this._labOrderId = value;
					this.SendPropertyChanged("labOrderId");
					this.OnlabOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", DbType="BigInt NOT NULL")]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateVisit", DbType="Date NOT NULL")]
		public System.DateTime dateVisit
		{
			get
			{
				return this._dateVisit;
			}
			set
			{
				if ((this._dateVisit != value))
				{
					this.OndateVisitChanging(value);
					this.SendPropertyChanging();
					this._dateVisit = value;
					this.SendPropertyChanged("dateVisit");
					this.OndateVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_Visit", Storage="_Visits", ThisKey="labOrderId", OtherKey="labOrderId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_LabOrderDetail", Storage="_LabOrderDetails", ThisKey="labOrderId", OtherKey="labOrderId")]
		public EntitySet<LabOrderDetail> LabOrderDetails
		{
			get
			{
				return this._LabOrderDetails;
			}
			set
			{
				this._LabOrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_LabOrder", Storage="_Doctor", ThisKey="doctorId", OtherKey="doctorId", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.LabOrders.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.LabOrders.Add(this);
						this._doctorId = value.doctorId;
					}
					else
					{
						this._doctorId = default(long);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.LabOrder = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.LabOrder = null;
		}
		
		private void attach_LabOrderDetails(LabOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.LabOrder = this;
		}
		
		private void detach_LabOrderDetails(LabOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.LabOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabOrderDetail")]
	public partial class LabOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _labOrderDetailId;
		
		private long _labOrderId;
		
		private long _medicalServiceId;
		
		private string _labResult;
		
		private EntityRef<LabOrder> _LabOrder;
		
		private EntityRef<MedicalService> _MedicalService;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlabOrderDetailIdChanging(long value);
    partial void OnlabOrderDetailIdChanged();
    partial void OnlabOrderIdChanging(long value);
    partial void OnlabOrderIdChanged();
    partial void OnmedicalServiceIdChanging(long value);
    partial void OnmedicalServiceIdChanged();
    partial void OnlabResultChanging(string value);
    partial void OnlabResultChanged();
    #endregion
		
		public LabOrderDetail()
		{
			this._LabOrder = default(EntityRef<LabOrder>);
			this._MedicalService = default(EntityRef<MedicalService>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labOrderDetailId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long labOrderDetailId
		{
			get
			{
				return this._labOrderDetailId;
			}
			set
			{
				if ((this._labOrderDetailId != value))
				{
					this.OnlabOrderDetailIdChanging(value);
					this.SendPropertyChanging();
					this._labOrderDetailId = value;
					this.SendPropertyChanged("labOrderDetailId");
					this.OnlabOrderDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labOrderId", DbType="BigInt NOT NULL")]
		public long labOrderId
		{
			get
			{
				return this._labOrderId;
			}
			set
			{
				if ((this._labOrderId != value))
				{
					if (this._LabOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlabOrderIdChanging(value);
					this.SendPropertyChanging();
					this._labOrderId = value;
					this.SendPropertyChanged("labOrderId");
					this.OnlabOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalServiceId", DbType="BigInt NOT NULL")]
		public long medicalServiceId
		{
			get
			{
				return this._medicalServiceId;
			}
			set
			{
				if ((this._medicalServiceId != value))
				{
					if (this._MedicalService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmedicalServiceIdChanging(value);
					this.SendPropertyChanging();
					this._medicalServiceId = value;
					this.SendPropertyChanged("medicalServiceId");
					this.OnmedicalServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labResult", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string labResult
		{
			get
			{
				return this._labResult;
			}
			set
			{
				if ((this._labResult != value))
				{
					this.OnlabResultChanging(value);
					this.SendPropertyChanging();
					this._labResult = value;
					this.SendPropertyChanged("labResult");
					this.OnlabResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabOrder_LabOrderDetail", Storage="_LabOrder", ThisKey="labOrderId", OtherKey="labOrderId", IsForeignKey=true)]
		public LabOrder LabOrder
		{
			get
			{
				return this._LabOrder.Entity;
			}
			set
			{
				LabOrder previousValue = this._LabOrder.Entity;
				if (((previousValue != value) 
							|| (this._LabOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabOrder.Entity = null;
						previousValue.LabOrderDetails.Remove(this);
					}
					this._LabOrder.Entity = value;
					if ((value != null))
					{
						value.LabOrderDetails.Add(this);
						this._labOrderId = value.labOrderId;
					}
					else
					{
						this._labOrderId = default(long);
					}
					this.SendPropertyChanged("LabOrder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalService_LabOrderDetail", Storage="_MedicalService", ThisKey="medicalServiceId", OtherKey="medicalServiceId", IsForeignKey=true)]
		public MedicalService MedicalService
		{
			get
			{
				return this._MedicalService.Entity;
			}
			set
			{
				MedicalService previousValue = this._MedicalService.Entity;
				if (((previousValue != value) 
							|| (this._MedicalService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalService.Entity = null;
						previousValue.LabOrderDetails.Remove(this);
					}
					this._MedicalService.Entity = value;
					if ((value != null))
					{
						value.LabOrderDetails.Add(this);
						this._medicalServiceId = value.medicalServiceId;
					}
					else
					{
						this._medicalServiceId = default(long);
					}
					this.SendPropertyChanged("MedicalService");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalService")]
	public partial class MedicalService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _medicalServiceId;
		
		private long _medicalServiceGroupId;
		
		private string _medicalServiceName;
		
		private decimal _price;
		
		private EntitySet<LabOrderDetail> _LabOrderDetails;
		
		private EntityRef<MedicalServiceGroup> _MedicalServiceGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmedicalServiceIdChanging(long value);
    partial void OnmedicalServiceIdChanged();
    partial void OnmedicalServiceGroupIdChanging(long value);
    partial void OnmedicalServiceGroupIdChanged();
    partial void OnmedicalServiceNameChanging(string value);
    partial void OnmedicalServiceNameChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    #endregion
		
		public MedicalService()
		{
			this._LabOrderDetails = new EntitySet<LabOrderDetail>(new Action<LabOrderDetail>(this.attach_LabOrderDetails), new Action<LabOrderDetail>(this.detach_LabOrderDetails));
			this._MedicalServiceGroup = default(EntityRef<MedicalServiceGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalServiceId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long medicalServiceId
		{
			get
			{
				return this._medicalServiceId;
			}
			set
			{
				if ((this._medicalServiceId != value))
				{
					this.OnmedicalServiceIdChanging(value);
					this.SendPropertyChanging();
					this._medicalServiceId = value;
					this.SendPropertyChanged("medicalServiceId");
					this.OnmedicalServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalServiceGroupId", DbType="BigInt NOT NULL")]
		public long medicalServiceGroupId
		{
			get
			{
				return this._medicalServiceGroupId;
			}
			set
			{
				if ((this._medicalServiceGroupId != value))
				{
					if (this._MedicalServiceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmedicalServiceGroupIdChanging(value);
					this.SendPropertyChanging();
					this._medicalServiceGroupId = value;
					this.SendPropertyChanged("medicalServiceGroupId");
					this.OnmedicalServiceGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalServiceName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string medicalServiceName
		{
			get
			{
				return this._medicalServiceName;
			}
			set
			{
				if ((this._medicalServiceName != value))
				{
					this.OnmedicalServiceNameChanging(value);
					this.SendPropertyChanging();
					this._medicalServiceName = value;
					this.SendPropertyChanged("medicalServiceName");
					this.OnmedicalServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(18,2) NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalService_LabOrderDetail", Storage="_LabOrderDetails", ThisKey="medicalServiceId", OtherKey="medicalServiceId")]
		public EntitySet<LabOrderDetail> LabOrderDetails
		{
			get
			{
				return this._LabOrderDetails;
			}
			set
			{
				this._LabOrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalServiceGroup_MedicalService", Storage="_MedicalServiceGroup", ThisKey="medicalServiceGroupId", OtherKey="medicalServiceGroupId", IsForeignKey=true)]
		public MedicalServiceGroup MedicalServiceGroup
		{
			get
			{
				return this._MedicalServiceGroup.Entity;
			}
			set
			{
				MedicalServiceGroup previousValue = this._MedicalServiceGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalServiceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalServiceGroup.Entity = null;
						previousValue.MedicalServices.Remove(this);
					}
					this._MedicalServiceGroup.Entity = value;
					if ((value != null))
					{
						value.MedicalServices.Add(this);
						this._medicalServiceGroupId = value.medicalServiceGroupId;
					}
					else
					{
						this._medicalServiceGroupId = default(long);
					}
					this.SendPropertyChanged("MedicalServiceGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabOrderDetails(LabOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.MedicalService = this;
		}
		
		private void detach_LabOrderDetails(LabOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.MedicalService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalServiceGroup")]
	public partial class MedicalServiceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _medicalServiceGroupId;
		
		private string _medicalServiceGroupName;
		
		private EntitySet<MedicalService> _MedicalServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmedicalServiceGroupIdChanging(long value);
    partial void OnmedicalServiceGroupIdChanged();
    partial void OnmedicalServiceGroupNameChanging(string value);
    partial void OnmedicalServiceGroupNameChanged();
    #endregion
		
		public MedicalServiceGroup()
		{
			this._MedicalServices = new EntitySet<MedicalService>(new Action<MedicalService>(this.attach_MedicalServices), new Action<MedicalService>(this.detach_MedicalServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalServiceGroupId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long medicalServiceGroupId
		{
			get
			{
				return this._medicalServiceGroupId;
			}
			set
			{
				if ((this._medicalServiceGroupId != value))
				{
					this.OnmedicalServiceGroupIdChanging(value);
					this.SendPropertyChanging();
					this._medicalServiceGroupId = value;
					this.SendPropertyChanged("medicalServiceGroupId");
					this.OnmedicalServiceGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medicalServiceGroupName", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string medicalServiceGroupName
		{
			get
			{
				return this._medicalServiceGroupName;
			}
			set
			{
				if ((this._medicalServiceGroupName != value))
				{
					this.OnmedicalServiceGroupNameChanging(value);
					this.SendPropertyChanging();
					this._medicalServiceGroupName = value;
					this.SendPropertyChanged("medicalServiceGroupName");
					this.OnmedicalServiceGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalServiceGroup_MedicalService", Storage="_MedicalServices", ThisKey="medicalServiceGroupId", OtherKey="medicalServiceGroupId")]
		public EntitySet<MedicalService> MedicalServices
		{
			get
			{
				return this._MedicalServices;
			}
			set
			{
				this._MedicalServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalServices(MedicalService entity)
		{
			this.SendPropertyChanging();
			entity.MedicalServiceGroup = this;
		}
		
		private void detach_MedicalServices(MedicalService entity)
		{
			this.SendPropertyChanging();
			entity.MedicalServiceGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _patientId;
		
		private string _patientName;
		
		private long _genderId;
		
		private System.DateTime _dob;
		
		private string _address;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<Gender> _Gender;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpatientIdChanging(long value);
    partial void OnpatientIdChanged();
    partial void OnpatientNameChanging(string value);
    partial void OnpatientNameChanged();
    partial void OngenderIdChanging(long value);
    partial void OngenderIdChanged();
    partial void OndobChanging(System.DateTime value);
    partial void OndobChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    #endregion
		
		public Patient()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._Gender = default(EntityRef<Gender>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long patientId
		{
			get
			{
				return this._patientId;
			}
			set
			{
				if ((this._patientId != value))
				{
					this.OnpatientIdChanging(value);
					this.SendPropertyChanging();
					this._patientId = value;
					this.SendPropertyChanged("patientId");
					this.OnpatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientName", DbType="VarChar(70) NOT NULL", CanBeNull=false)]
		public string patientName
		{
			get
			{
				return this._patientName;
			}
			set
			{
				if ((this._patientName != value))
				{
					this.OnpatientNameChanging(value);
					this.SendPropertyChanging();
					this._patientName = value;
					this.SendPropertyChanged("patientName");
					this.OnpatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderId", DbType="BigInt NOT NULL")]
		public long genderId
		{
			get
			{
				return this._genderId;
			}
			set
			{
				if ((this._genderId != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngenderIdChanging(value);
					this.SendPropertyChanging();
					this._genderId = value;
					this.SendPropertyChanged("genderId");
					this.OngenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date NOT NULL")]
		public System.DateTime dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Visits", ThisKey="patientId", OtherKey="patientId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Patient", Storage="_Gender", ThisKey="genderId", OtherKey="genderId", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._genderId = value.genderId;
					}
					else
					{
						this._genderId = default(long);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _prescriptionId;
		
		private long _doctorId;
		
		private System.DateTime _dateWritten;
		
		private EntitySet<Visit> _Visits;
		
		private EntitySet<PrescriptionDetail> _PrescriptionDetails;
		
		private EntityRef<Doctor> _Doctor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprescriptionIdChanging(long value);
    partial void OnprescriptionIdChanged();
    partial void OndoctorIdChanging(long value);
    partial void OndoctorIdChanged();
    partial void OndateWrittenChanging(System.DateTime value);
    partial void OndateWrittenChanged();
    #endregion
		
		public Prescription()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._PrescriptionDetails = new EntitySet<PrescriptionDetail>(new Action<PrescriptionDetail>(this.attach_PrescriptionDetails), new Action<PrescriptionDetail>(this.detach_PrescriptionDetails));
			this._Doctor = default(EntityRef<Doctor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prescriptionId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long prescriptionId
		{
			get
			{
				return this._prescriptionId;
			}
			set
			{
				if ((this._prescriptionId != value))
				{
					this.OnprescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._prescriptionId = value;
					this.SendPropertyChanged("prescriptionId");
					this.OnprescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorId", DbType="BigInt NOT NULL")]
		public long doctorId
		{
			get
			{
				return this._doctorId;
			}
			set
			{
				if ((this._doctorId != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIdChanging(value);
					this.SendPropertyChanging();
					this._doctorId = value;
					this.SendPropertyChanged("doctorId");
					this.OndoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateWritten", DbType="Date NOT NULL")]
		public System.DateTime dateWritten
		{
			get
			{
				return this._dateWritten;
			}
			set
			{
				if ((this._dateWritten != value))
				{
					this.OndateWrittenChanging(value);
					this.SendPropertyChanging();
					this._dateWritten = value;
					this.SendPropertyChanged("dateWritten");
					this.OndateWrittenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Visit", Storage="_Visits", ThisKey="prescriptionId", OtherKey="prescriptionId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionDetail", Storage="_PrescriptionDetails", ThisKey="prescriptionId", OtherKey="prescriptionId")]
		public EntitySet<PrescriptionDetail> PrescriptionDetails
		{
			get
			{
				return this._PrescriptionDetails;
			}
			set
			{
				this._PrescriptionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Prescription", Storage="_Doctor", ThisKey="doctorId", OtherKey="doctorId", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._doctorId = value.doctorId;
					}
					else
					{
						this._doctorId = default(long);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
		
		private void attach_PrescriptionDetails(PrescriptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_PrescriptionDetails(PrescriptionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescriptionDetail")]
	public partial class PrescriptionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _prescriptionDetailId;
		
		private long _prescriptionId;
		
		private long _drugId;
		
		private int _quantity;
		
		private int _dosePerDay;
		
		private string _specialInstruction;
		
		private EntityRef<Drug> _Drug;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprescriptionDetailIdChanging(long value);
    partial void OnprescriptionDetailIdChanged();
    partial void OnprescriptionIdChanging(long value);
    partial void OnprescriptionIdChanged();
    partial void OndrugIdChanging(long value);
    partial void OndrugIdChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void OndosePerDayChanging(int value);
    partial void OndosePerDayChanged();
    partial void OnspecialInstructionChanging(string value);
    partial void OnspecialInstructionChanged();
    #endregion
		
		public PrescriptionDetail()
		{
			this._Drug = default(EntityRef<Drug>);
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prescriptionDetailId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long prescriptionDetailId
		{
			get
			{
				return this._prescriptionDetailId;
			}
			set
			{
				if ((this._prescriptionDetailId != value))
				{
					this.OnprescriptionDetailIdChanging(value);
					this.SendPropertyChanging();
					this._prescriptionDetailId = value;
					this.SendPropertyChanged("prescriptionDetailId");
					this.OnprescriptionDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prescriptionId", DbType="BigInt NOT NULL")]
		public long prescriptionId
		{
			get
			{
				return this._prescriptionId;
			}
			set
			{
				if ((this._prescriptionId != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._prescriptionId = value;
					this.SendPropertyChanged("prescriptionId");
					this.OnprescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drugId", DbType="BigInt NOT NULL")]
		public long drugId
		{
			get
			{
				return this._drugId;
			}
			set
			{
				if ((this._drugId != value))
				{
					if (this._Drug.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndrugIdChanging(value);
					this.SendPropertyChanging();
					this._drugId = value;
					this.SendPropertyChanged("drugId");
					this.OndrugIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dosePerDay", DbType="Int NOT NULL")]
		public int dosePerDay
		{
			get
			{
				return this._dosePerDay;
			}
			set
			{
				if ((this._dosePerDay != value))
				{
					this.OndosePerDayChanging(value);
					this.SendPropertyChanging();
					this._dosePerDay = value;
					this.SendPropertyChanged("dosePerDay");
					this.OndosePerDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_specialInstruction", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string specialInstruction
		{
			get
			{
				return this._specialInstruction;
			}
			set
			{
				if ((this._specialInstruction != value))
				{
					this.OnspecialInstructionChanging(value);
					this.SendPropertyChanging();
					this._specialInstruction = value;
					this.SendPropertyChanged("specialInstruction");
					this.OnspecialInstructionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drug_PrescriptionDetail", Storage="_Drug", ThisKey="drugId", OtherKey="drugId", IsForeignKey=true)]
		public Drug Drug
		{
			get
			{
				return this._Drug.Entity;
			}
			set
			{
				Drug previousValue = this._Drug.Entity;
				if (((previousValue != value) 
							|| (this._Drug.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Drug.Entity = null;
						previousValue.PrescriptionDetails.Remove(this);
					}
					this._Drug.Entity = value;
					if ((value != null))
					{
						value.PrescriptionDetails.Add(this);
						this._drugId = value.drugId;
					}
					else
					{
						this._drugId = default(long);
					}
					this.SendPropertyChanged("Drug");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_PrescriptionDetail", Storage="_Prescription", ThisKey="prescriptionId", OtherKey="prescriptionId", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.PrescriptionDetails.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.PrescriptionDetails.Add(this);
						this._prescriptionId = value.prescriptionId;
					}
					else
					{
						this._prescriptionId = default(long);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _roleId;
		
		private string _roleName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIdChanging(long value);
    partial void OnroleIdChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="roleId", OtherKey="roleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _userId;
		
		private long _roleId;
		
		private string _username;
		
		private string _password;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(long value);
    partial void OnuserIdChanged();
    partial void OnroleIdChanging(long value);
    partial void OnroleIdChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public User()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="BigInt NOT NULL")]
		public long roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="roleId", OtherKey="roleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._roleId = value.roleId;
					}
					else
					{
						this._roleId = default(long);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
